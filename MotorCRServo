#pragma config(Hubs,  S1, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Servo,  srvo_S1_C1_1,    servo1,               tServoContinuousRotation)
#pragma config(Servo,  srvo_S1_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//This code will introduce you to the continuous rotation servo.

//This code requires basic knowledge of ROBOTC syntax, so if you have trouble, ask an older programmer.
//To see it in action, attach a servo controller to Sensor Port 1, and attach a servo to the channel 1 connector.

//This code is not intended for direct copy-paste, but feel free to use the elements you find from it to make your own programs.

task main()
{
	//Servos are attached to servo controllers. Six can be attached per controller.
	//All servo labels will apply to a servo, you must specify which channels are active in "Motors and Sensors Setup".
	//Servos can range from servo1 to servo6, even to servo24, if you're really dedicated.
	//However, for the sake of simplicity, we will use servo1.

	//Continuous Rotation Servos are very simple.
	//To move one, set its speed to a value between 0 and 255.
	//0 is full speed reverse, 127 is stopped, and 255 is full speed forward.
	//At full speed, it turns with 43.4 RPM, and can withstand 38.88 oz-in of torque.

	servo[servo1] = 0; //This puts the servo in reverse

	wait1Msec(1000);

	servo[servo1] = 127; //This stops the servo

	wait1Msec(1000);

	servo[servo1] = 255; //This puts the servo forward

	wait1Msec(1000);

	servo[servo1] = 127; //This stops the servo again.

	//That's all you need to know for continuous servo motors.
}
