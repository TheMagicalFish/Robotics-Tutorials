#pragma config(Hubs,  S1, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Servo,  srvo_S1_C1_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//This code will introduce you to the one of the three motors used in FTC competition: The servo.

//This code requires basic knowledge of ROBOTC syntax, so if you have trouble, ask an older programmer.
//To see it in action, attach a servo controller to Sensor Port 1, and attach a servo to the channel 1 connector.

//This code is not intended for direct copy-paste, but feel free to use the elements you find from it to make your own programs.

task main()
{
	//Servos are attached to servo controllers. Six can be attached per controller.
	//All servo labels will apply to a servo, you must specify which channels are active in "Motors and Sensors Setup".
	//Servos can range from servo1 to servo6, even to servo24, if you're really dedicated.
	//However, for the sake of simplicity, we will use servo1.

	//The servo is comparatively more complicated to run than the other motors.
	//It moves by targeting a position, rather than setting a speed.

	//To set the speed at which the servo will change, use this command:
	//(The default rate is 10)
	//It can withstand 76 oz-in of torque.

	servoChangeRate[servo1] = 2; //This will cause the servo to change 2 positions per update. Updates occur every 20 milliseconds.

	//To actually move the servo, use this command:
	servo[servo1] = 100;

	wait1Msec(1000); //Always give the servo some time to move before continuing.

	//Servo positions range from 0 to 255. I recommend avoiding extremes, however.
	//If you set extremes (i.e. 0 or 255), it is unlikely that the servo will actually reach that position.
	//Instead, it will continually run after reaching its position, which could potentially burn it out.
	//tl;dr: instead of using 0 or 255, use 10 and 245.

	//To read the servo's position, use this command:
	servoValue[servo1];
	//This is a read-only variable, which you can use to tell the servo's position without moving it.

	//That's all you need to know for basic servo motors.
	//For more information, go to:
	//http://www.robotc.net/wiki/TETRIX_Servo_Controller
}
