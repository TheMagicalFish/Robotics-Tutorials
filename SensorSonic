#pragma config(Sensor, S2,     sonarSensor,    sensorSONAR)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//This program will introduce you to the peculiarities of the NXT Mindstorms ultrasonic sensor.
//To see it in action, connect an ultrasonic sensor to the S2 port on your NXT brick.

//The sonic sensor reads values from 0 to 255. Each value corresponds to the number of centimeters between the sensor and an object.

//There are two known bugs with the ultrasonic sensor:
//First, the sensor will often return 255, when it does not find an object. This occurs occasionally when objects are closer.
//Second, between 25 and 50 centimeters, the sensor will occasionally return 48 when the object is closer.
//This code will show you how to deal with these issues.

//The following program will run through an infinite loop with a wait function.
//The amount of time it waits will be determined by the distance from the nearest object in front of the sensor.

task main()
{
	//Begin by making two storage variables for the sensor value.
	int distance = 255;
	int tempStorage = 255;

	while(true) { //Infinite loop
		//First, we need to account for the bugs previously mentioned:

		tempStorage = SensorValue(sonarSensor); //This variable will carry through the loop until distance is set.

		if(tempStorage == 48 || tempStorage == 255) { //This allows the computer to ignore the erroneous variables.
			//The program will not change the distance from the loops' last run.
		}
		else {
			distance = tempStorage; //This if/else combination allows the program to ignore erroneous variables, while still reading the sensor's readings each time.
		}

		//Now that we have the most accurate distance value possible, we can continue with the actual program.

		PlaySound(soundBlip);

		wait10Msec(distance); //This makes the program wait for 10 milliseconds for every centimeter of distance.

	}
}

//With this information, you should be able to make very accurate readings of distance using this sensor.
